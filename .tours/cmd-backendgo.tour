{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "cmd-backend.go",
  "steps": [
    {
      "file": "cmd/backend.go",
      "description": "declares that this file belongs to `main` package, which means its an execuatble programm and `main` is the entry point ",
      "line": 1
    },
    {
      "file": "cmd/backend.go",
      "description": "These are documentation annotations for Swagger (for generating API documentation).\nThese lines describe the API title, version, description, and how to include the JWT in headers",
      "line": 20
    },
    {
      "file": "cmd/backend.go",
      "description": "Defines a command-line argument called `envFile`, which defaults to `.env`",
      "line": 32
    },
    {
      "file": "cmd/backend.go",
      "description": "`flag.Parse()` reads and applies and command-line arguments.\nFor example, if default: `go run main.go`, but if want to use a custom file,\nthen do: `go run main.go -envFile=.env.production`",
      "line": 33
    },
    {
      "file": "cmd/backend.go",
      "description": "sets global log level to `Info`, meaning messages at `Info` level and above are shown",
      "line": 36
    },
    {
      "file": "cmd/backend.go",
      "description": "Logs are directed to `os.Stderr` using `zerolog` in a readable format for the console",
      "line": 37
    },
    {
      "file": "cmd/backend.go",
      "description": "Logs an attempt to load env variables from `.env` or custom file",
      "line": 40
    },
    {
      "file": "cmd/backend.go",
      "description": "Uses `godotenv.Load` to actually load the envvar file",
      "line": 41
    },
    {
      "file": "cmd/backend.go",
      "description": "checks if `dotenv_err` is empty or not (i.e. if there was no error loading the envvar file or not, respectively). If there was an error, logs a warning, otherwise, log a success message",
      "line": 43
    },
    {
      "file": "cmd/backend.go",
      "description": "calls `GetDB` function from `utils` folder (check `utils/database.go`)\nBasically, `utils.GetDB()` initialises the database connection and returns a GORM database instance (db) and an error if any issues arise (db_err).\n\nGORM is (an object-relational mapping (ORM) library for golang) is a framework for mapping an object-oriented domain model to a relational database (e.g. postgres). \nIt is used to pass the databse instance to the router.\n\nFor more info, go check that file",
      "line": 49
    },
    {
      "file": "cmd/backend.go",
      "description": "checks for a database connection error. If there is an issue, it logs the error and exits with `log.Fatal`",
      "line": 51
    },
    {
      "file": "cmd/backend.go",
      "description": "`utils.MigrateModels()` takes a GORM database connection (db) and returns an error if any migration fails.\nThe main purpose is to ensure database schemas match the program's expected structure \nFor more info, check `utils/database.go`",
      "line": 55
    },
    {
      "file": "cmd/backend.go",
      "description": "Log the error and exit if migration fails",
      "line": 56
    },
    {
      "file": "cmd/backend.go",
      "description": "logs the creation of a new router and calls `NewRouter` from `server` package.\nBasically, sets up a Gorilla Mux router and registers routes for KWoC backend, using `middlewares` for loggins and error handling.\nFor more information, check `server/router.go`",
      "line": 60
    },
    {
      "file": "cmd/backend.go",
      "description": "fetch the `BACKEND_PORT` env var, defaulting to 8080 if not set. \nDefines the port on which the server listens ",
      "line": 63
    },
    {
      "file": "cmd/backend.go",
      "description": "Lol, sanity checking if the `port` is a valid integeer. If not, log the error and exit the program. \nThis prevents a startup error",
      "line": 69
    },
    {
      "file": "cmd/backend.go",
      "description": "create a channel `c` that will recieve os signals. It is buffered with capacity 1, meaning it can hold 1 signal at a time. This allows the app to wait for a signal without blocking",
      "line": 77
    },
    {
      "file": "cmd/backend.go",
      "description": "ensures `c` is closed whent he surrounding function returns. `defer` statements are executed in reverse order of their appearance when the function exits, ensuring resources are properly released.",
      "line": 78
    },
    {
      "file": "cmd/backend.go",
      "description": "tells go runtime to send incoming signals (here, `os.Interrupt` (signal generated by user, e.g. `ctrl+c`) and `syscall.SIGTERM`(sent by OS to request hte termination of the process)) to channel `c`. ",
      "line": 80
    },
    {
      "file": "cmd/backend.go",
      "description": "1. `go func() {...}` starts a new goroutine\n2. `<-c` the goroutine waits for a signal to be received on channel `c`\n3. `cleanup()` calls the function (check below) to gracefully shutdown the server -> closing db connections, saving state, etc.\n4. `os.Exit(1)` terminates the app with exit status of `1`, indicating the program ended due to an error or signal. Usually 1 means that program was terminated by the user",
      "line": 81
    },
    {
      "file": "cmd/backend.go",
      "description": "uses `cors` package to load specific origins from env var file and defines allowed headers and HTTP methods ",
      "line": 87
    },
    {
      "file": "cmd/backend.go",
      "description": "logs a message indicating the server is starting, then calls `http.ListenAndServe`, wchih starts an HTTP server ont he specified port. \n`corsObj.Handler(router)` wraps the router with CORS settings",
      "line": 94
    },
    {
      "file": "cmd/backend.go",
      "description": "checks if there was an error in starting the server. If yes, log the error and exit the program",
      "line": 100
    },
    {
      "file": "cmd/backend.go",
      "description": "defines a cleanup function that logs when the server receives a shutdown signal (SIGINT).\nit is called when an interrupt signal is detected, ensurign a clean server shutdown",
      "line": 105
    }
  ],
  "ref": "code-tour"
}